{"version":3,"sources":["components/Carousel.js","App.js","index.js","components/css/index.module.scss"],"names":["Carousel","props","zoomDefault","zoom","scale","distance","origin","zoomRef","React","useRef","slideTo","index","newTransfrom","images","length","setSlidePosition","slidePosition","currentSlide","currentTransform","prevTransform","containerRef","useState","initialTransform","setZoom","bind","useGesture","onDragEnd","state","x","direction","positionFix","slideCount","slideWidth","console","log","dragEndHandler","movement","onDrag","containerWidth","current","clientWidth","transform","onPinchStart","onPinch","pinchDistance","da","clientHeight","window","innerHeight","zoomStatus","useEffect","document","querySelector","style","overflow","ref","className","styles","container","showOverflow","id","slideContainer","width","map","image","slide","key","draggable","src","alt","button_zoom","onClick","newScale","position","right","bottom","background","border","padding","App","setCurrentSlide","setImages","families","sparkle","spring","familyList","Object","keys","family","array","getElementById","classList","add","ReactDOM","render","StrictMode","module","exports"],"mappings":"0MAkQeA,EA7PE,SAAAC,GACb,IAAMC,EAAe,CACjBC,MAAM,EACNC,MAAO,EACPC,SAAU,EACVC,OAAQ,GAGNC,EAAUC,IAAMC,OAAO,MAGvBC,GAFkBF,IAAMC,OAAO,MAErB,SAACE,GACb,IAAMC,GAAkB,IAAMX,EAAMY,OAAOC,OAAUH,EACrDI,EAAiB,2BACVC,GADS,IAEZC,aAAcN,EACdO,iBAAkBN,EAClBO,cAAeP,EACfT,KAAK,eAAKD,QAoDZkB,EAAeZ,IAAMC,SAtEL,EAuEoBD,IAAMa,SAAS,CACrDJ,aAAchB,EAAMgB,aACpBE,cAAelB,EAAMqB,iBACrBJ,iBAAkBjB,EAAMqB,mBA1EN,mBAuEfN,EAvEe,KAuEAD,EAvEA,OA4EEP,IAAMa,SAAS,CACnClB,MAAM,EACNC,MAAO,EACPC,SAAU,EACVC,OAAQ,IAhFU,mBA4EfH,EA5Ee,KA4EToB,EA5ES,KAsHhBC,EAAOC,YACT,CACIC,UAAW,SAACC,GAAD,OArCI,SAACC,GACpB,IAAGzB,EAAKA,KAAR,CAGA,IAAM0B,EAAYD,EAAI,EAAI,GAAK,EAE3BE,EAAcd,EAAcE,iBAC5Ba,EAAa9B,EAAMY,OAAOC,OAC1BkB,EAAa,IAAMD,EACnBpB,EAAQ,KAiBZ,OAfImB,EAAc,IAChBA,EAAc,EACdnB,EAAQ,GAENmB,EAAcE,EAAa,KAC3BF,EAAeE,EAAa,IAC5BrB,EAAQoB,EAAa,KAGzBpB,EAAQK,EAAcC,aAAeY,GAEtB,IAAGlB,EAAQ,GACnBA,EAAQoB,EAAa,IAAGpB,EAAQoB,EAAY,GAC/CD,GAAiBnB,GAAU,IAAMoB,IAE9BhB,EAAiB,2BACjBC,GADgB,IAEnBC,aAAcN,EAEdQ,cAAeW,EACfZ,iBAAkBY,KA7BlBG,QAAQC,IAAI,QAmCUC,CAAeR,EAAMS,SAAS,KAEpDC,OAAQ,SAACV,GACL,IAAGxB,EAAKA,KAAR,CAKE,IAAMmC,EAAiBlB,EAAamB,QAAQC,YACtCT,EAAa9B,EAAMY,OAAOC,OAC3B2B,EAAYzB,EAAcG,cAAsC,IAApBQ,EAAMS,SAAS,GAAWE,EAAkBP,EAK7F,OAAOhB,EAAiB,2BACnBC,GADkB,IAErBE,iBAAkBuB,KAblBR,QAAQC,IAAI,SAgBpBQ,aAAc,SAAAf,GACVJ,EAAQ,2BACDpB,GADA,IAEHA,MAAM,MAGdwC,QAAS,SAAAhB,GAEL,IAAMiB,EAAgBjB,EAAMkB,GAAG,GAK3BzC,GAJoBgB,EAAamB,QAAQO,aAC3BC,OAAOC,YACYzC,EAAQgC,QAAQO,aACrCvC,EAAQuC,aACZF,EAAgB,KACxBK,GAAa,EACd7C,GAAS,IACRA,EAAQ,EACR6C,GAAa,GAEjB1B,EAAQ,2BACDpB,GADA,IAEHA,KAAM8C,EACN5C,SAAUsB,EAAMkB,GAAG,GACnBzC,cAoBhB,OAZA8C,qBAAU,WACH/C,EAAKA,KACJgD,SAASC,cAAc,QAAQC,MAAMC,SAAW,SAGhDH,SAASC,cAAc,QAAQC,MAAMC,SAAW,UAEnD,CAACnD,IACN+C,qBAAU,WACNxC,EAAQT,EAAMgB,gBACb,CAAChB,IAGE,yBACIsD,IAAKnC,EACLoC,UAAS,UAAKC,IAAOC,UAAZ,YAAyBvD,EAAKA,KAAOsD,IAAOE,aAAe,KAExE,yCACQnC,IADR,CAEIoC,GAAG,iBACHJ,UAAWC,IAAOI,eAClBR,MAAO,CACHS,MAAM,GAAD,OAAK,IAAM7D,EAAMY,OAAOC,OAAxB,KAEL2B,UAAU,cAAD,OAAgBzB,EAAcE,iBAA9B,SAGCjB,EAAMY,OA9JhBkD,KAAI,SAACC,EAAOrD,GACxB,OACI,yBACA6C,UAAS,UAAKC,IAAOQ,MAAZ,YAAqB9D,EAAKA,KAAOsD,IAAOE,aAAe,IAEhEO,IAAG,UAAKF,EAAL,YAAcrD,GAEjB0C,MAAOrC,EAAcC,eAAiB+C,EAAMrD,MACxC,CAACmD,MAAM,GAAD,OAAK,IAAM7D,EAAMY,OAAOC,OAAxB,KACN2B,UAAU,SAAD,OAAWtC,EAAKC,MAAhB,MACT,CAAC0D,MAAM,GAAD,OAAK,IAAM7D,EAAMY,OAAOC,OAAxB,OAEN,yBACIqD,WAAW,EACXZ,IAAKvC,EAAcC,eAAiB+C,EAAMrD,MAAQJ,EAAU,KAQ5D6D,IAAKJ,EAAMI,IACXC,IAAKL,EAAMI,WAyInB,4BACAZ,UAAWC,IAAOa,YAClBC,QAAS,WACL,IAAIC,EAAWrE,EAAKC,MAAQ,EAI5BmB,EAAQ,CACJpB,KAFmB,KADvBqE,EAAWA,EAAW,EAAI,EAAIA,GAI1BpE,MAAOoE,MATf,WAkCA,yBACAnB,MAAO,CACHoB,SAAU,QACVC,MAAO,EACPC,OAAQ,EACRC,WAAY,QACZC,OAAQ,YACRC,QAAS,SAET,wCAAe3E,EAAKE,UACpB,sCAAYF,EAAKG,QACjB,qCAAWH,EAAKC,OAChB,oCAAUD,EAAKA,KAAO,OAAS,YCnKhC4E,G,MApFH,SAAA9E,GAAU,IAAD,EACmBO,IAAMa,SAAS,CACnDV,MAAO,EACPW,iBAAkB,IAHD,mBACdL,EADc,KACA+D,EADA,OAIOxE,IAAMa,SAAS,CAAC,EAAG,EAAG,EAAG,EAAG,IAJnC,mBAIdR,EAJc,KAINoE,EAJM,KAMbC,EAAW,CACfC,QAAS,CAAC,CACRf,IAAK,yBACLzD,MAAO,GACN,CACDyD,IAAK,yBACLzD,MAAO,GACN,CACDyD,IAAK,yBACLzD,MAAO,GAET,CACEyD,IAAK,yBACLzD,MAAO,GAET,CACEyD,IAAK,oBACLzD,MAAO,GAET,CACEyD,IAAK,oBACLzD,MAAO,IAGTyE,OAAQ,CAAC,CACPhB,IAAK,wBACLzD,MAAO,GACN,CACDyD,IAAK,wBACLzD,MAAO,GACN,CACDyD,IAAK,wBACLzD,MAAO,KAIL0E,EAAaC,OAAOC,KAAKL,GAE/B,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,CACEvC,aAAcA,EAAaN,MAC3BW,iBAAkBL,EAAaK,iBAC/BT,OAAQA,IAEV,yBAAK2C,UAAU,QAEX6B,EAAWtB,KAAI,SAACyB,GACd,OAAO,yBAAKtB,IAAKsB,EAAQhC,UAAU,gBACjC,4BAAKgC,GACL,yBAAKhC,UAAU,aAEX0B,EAASM,GAAQzB,KAAI,SAACC,EAAOrD,EAAO8E,GAClC,OAAO,yBAAKvB,IAAG,UAAKF,EAAL,YAAcrD,GAAS6C,UAAU,cAC9C,yBACIU,IAAKF,EAAMI,IACXA,IAAKJ,EAAMI,IACXC,IAAKL,EAAMI,IAEXG,QAAS,WACPU,EAAUC,EAASM,IACnBR,EAAgB,CAACrE,MAAOqD,EAAMrD,MAAOW,iBAAmB,IAAMmE,EAAM3E,OAASkD,EAAMrD,QAC9DwC,SAASuC,eAAe,kBAC9BC,UAAUC,IAAI,+BCrEzDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5C,SAASuC,eAAe,U,kBCP1BM,EAAOC,QAAU,CAAC,kBAAoB,+BAA+B,aAAe,0BAA0B,UAAY,uBAAuB,eAAiB,4BAA4B,MAAQ,mBAAmB,YAAc,yBAAyB,SAAW,sBAAsB,QAAU,qBAAqB,IAAM,iBAAiB,WAAa,0B","file":"static/js/main.91743e48.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useDrag, useMove, useGesture } from 'react-use-gesture'\r\n\r\nimport styles from './css/index.module.scss'\r\n\r\nconst Carousel = props => {\r\n    const zoomDefault =  {\r\n        zoom: false,\r\n        scale: 1,\r\n        distance: 0,\r\n        origin: 0\r\n    }\r\n\r\n    const zoomRef = React.useRef(null)\r\n    const currentSlideRef = React.useRef(null)\r\n\r\n    const slideTo = (index) => {\r\n        const newTransfrom = -((100 / props.images.length) * index)\r\n        setSlidePosition({\r\n            ...slidePosition,\r\n            currentSlide: index,\r\n            currentTransform: newTransfrom,\r\n            prevTransform: newTransfrom,\r\n            zoom: {...zoomDefault}\r\n        })\r\n    }\r\n\r\n    const dots = (imageList) => {\r\n        if(!imageList || imageList.length < 0){return}\r\n        const dots = imageList.map((image, index) => {\r\n            return <li \r\n            onClick={() => {\r\n                slideTo(index)\r\n            }}\r\n            key={`carouselDot-${index}`} \r\n            className={`${styles.dot} ${index === slidePosition.currentSlide ? styles.dot_active : \"\"}`}\r\n            ></li>\r\n        })\r\n        return <ul className={styles.dotList}>{dots}</ul>\r\n    }\r\n\r\n\r\n\r\n\r\n    const renderImages = (data) => {\r\n        return data.map((image, index) => {\r\n        return (\r\n            <div\r\n            className={`${styles.slide} ${zoom.zoom ? styles.showOverflow : \"\"}`}\r\n            // ref={cursorPosition.currentSlide === image.index ? currentSlideRef : null }\r\n            key={`${image}-${index}`}\r\n            // style={{width: `${100 / props.images.length}%`}}\r\n            style={slidePosition.currentSlide === image.index ? \r\n                {width: `${100 / props.images.length}%`, \r\n                transform: `scale(${zoom.scale})`} : \r\n                {width: `${100 / props.images.length}%`}}\r\n            >                       \r\n                <img \r\n                    draggable={false}\r\n                    ref={slidePosition.currentSlide === image.index ? zoomRef : null}\r\n                    // style={slidePosition.currentSlide === image.index ? {transform: `scale(${zoom.scale})`} : {}}\r\n                        // {transform: \r\n                        // `scale(${zoom.scale}) \r\n                        // translate(${zoom.zoom.x}%, \r\n                        // ${zoom.zoom.y}%)\r\n                        // `} \r\n                        // : {}}\r\n                    src={image.src}\r\n                    alt={image.src}\r\n                />\r\n            </div>\r\n        )\r\n        })\r\n    }\r\n          \r\n    const containerRef = React.useRef()\r\n    const [slidePosition, setSlidePosition] = React.useState({\r\n        currentSlide: props.currentSlide,\r\n        prevTransform: props.initialTransform,\r\n        currentTransform: props.initialTransform\r\n    })\r\n    const [zoom, setZoom] = React.useState({\r\n        zoom: false,\r\n        scale: 1,\r\n        distance: 0,\r\n        origin: 0\r\n    })\r\n\r\n    const dragEndHandler = (x) => {\r\n        if(zoom.zoom){\r\n            console.log(\"zoom\")\r\n            return}\r\n        const direction = x < 0 ? 1 : -1\r\n\r\n        var positionFix = slidePosition.currentTransform;\r\n        var slideCount = props.images.length;\r\n        var slideWidth = 100 / slideCount;\r\n        var index = null\r\n\r\n        if (positionFix > 0) {\r\n          positionFix = 0;\r\n          index = 0;\r\n        } \r\n        if (positionFix < slideWidth - 100) {\r\n            positionFix = (slideWidth - 100);\r\n            index = slideCount - 1;\r\n        } \r\n        else {\r\n        index = slidePosition.currentSlide + direction;\r\n        // console.log({currentSlide: slidePosition.currentSlide, next: index, direction, x})\r\n            if(index < 0){index = 0}\r\n            if(index > slideCount - 1){index = slideCount -1 }\r\n            positionFix = -((index) * (100 / slideCount));\r\n        }\r\n        return setSlidePosition({\r\n            ...slidePosition, \r\n            currentSlide: index,\r\n            // prevTransform: slidePosition.currentTransform,\r\n            prevTransform: positionFix,\r\n            currentTransform: positionFix,\r\n        })\r\n    }\r\n\r\n    const bind = useGesture(\r\n        {\r\n            onDragEnd: (state) => dragEndHandler(state.movement[0]),\r\n            // onDrag: ({movement: [mx, my]}) => {\r\n            onDrag: (state) => {\r\n                if(zoom.zoom){\r\n                    console.log(\"zoom\")\r\n                    return}\r\n                // console.log(state)\r\n                // state.event.stopPropagation()\r\n                  const containerWidth = containerRef.current.clientWidth;\r\n                  const slideCount = props.images.length\r\n                  let  transform = slidePosition.prevTransform + ((state.movement[0] * 100 / containerWidth) / slideCount)\r\n\r\n                //   transform = transform.toFixed(2)\r\n                //   console.log({transform})\r\n                //   console.log({...slidePosition})\r\n                  return setSlidePosition({ \r\n                    ...slidePosition,  \r\n                    currentTransform: transform,\r\n                    })\r\n            },\r\n            onPinchStart: state => {\r\n                setZoom({\r\n                    ...zoom,\r\n                    zoom: true\r\n                })\r\n            },\r\n            onPinch: state => {\r\n                // console.log(state.da[0])\r\n                const pinchDistance = state.da[0]\r\n                const containerHeight = containerRef.current.clientHeight;\r\n                const maxHeight = window.innerHeight\r\n                const imgToWindowRatio = maxHeight / zoomRef.current.clientHeight\r\n                const maxZoom = zoomRef.clientHeight\r\n                let scale = pinchDistance / 100\r\n                let zoomStatus = true\r\n                if(scale <= 1){\r\n                    scale = 1\r\n                    zoomStatus = false\r\n                }\r\n                setZoom({\r\n                    ...zoom,\r\n                    zoom: zoomStatus,\r\n                    distance: state.da[0],\r\n                    scale\r\n                })\r\n            }\r\n\r\n\r\n        }\r\n    )\r\n\r\n    useEffect(() => {\r\n        if(zoom.zoom){\r\n            document.querySelector(\".App\").style.overflow = \"hidden\"\r\n        }\r\n        else{\r\n            document.querySelector(\".App\").style.overflow = \"unset\"\r\n        }\r\n      }, [zoom])\r\n    useEffect(() => {\r\n        slideTo(props.currentSlide)\r\n      }, [props])\r\n\r\n    return(\r\n            <div \r\n                ref={containerRef}\r\n                className={`${styles.container} ${zoom.zoom ? styles.showOverflow : \"\"}`}\r\n            >\r\n            <div \r\n                {...bind()}\r\n                id=\"slideContainer\"\r\n                className={styles.slideContainer}\r\n                style={{\r\n                    width: `${100 * props.images.length}%`,\r\n                    // transform: `translateX(${-cursorPosition.transform}%)`\r\n                    transform: `translateX(${slidePosition.currentTransform}%)`\r\n                }}\r\n            >\r\n                {renderImages(props.images)}\r\n            </div>\r\n            <button \r\n            className={styles.button_zoom}\r\n            onClick={() => {\r\n                let newScale = zoom.scale + 1\r\n                let newZoom = true\r\n                newScale = newScale > 3 ? 1 : newScale\r\n                newZoom = newScale === 1 ? false : true\r\n                setZoom({\r\n                    zoom: newZoom,\r\n                    scale: newScale\r\n                })\r\n                // let zoomedIn = null\r\n                // const countZoom = () => {\r\n                //     let zoomPower = cursorPosition.zoom.zoomPower + 1\r\n                //     zoomedIn = true\r\n                //     if(zoomPower > 3){\r\n                //         zoomPower = 1\r\n                //         zoomedIn = false\r\n                //     }\r\n                //     return {zoomPower, zoomedIn}\r\n                // }\r\n                // const zoom = countZoom()\r\n                // setCursorPosition({\r\n                //     ...cursorPosition, \r\n                //     zoom: {\r\n                //         ...cursorPosition.zoom,\r\n                //         zoomedIn: zoom.zoomedIn,\r\n                //         zoomPower: zoom.zoomPower,\r\n                //         zoomIndex: cursorPosition.currentSlide,\r\n                //         y: 0,\r\n                //         x: 0\r\n                //     }\r\n                // })\r\n            }}>enlarge</button>\r\n            <div\r\n            style={{\r\n                position: \"fixed\",\r\n                right: 0,\r\n                bottom: 0,\r\n                background: \"white\",\r\n                border: \"2px solid\",\r\n                padding: \"15px\"\r\n            }}>\r\n                <p >distance: {zoom.distance}</p>\r\n                <p>origin: {zoom.origin}</p>\r\n                <p>scale: {zoom.scale}</p>\r\n                <p>zoom: {zoom.zoom ? \"true\" : \"false\"}</p>\r\n            </div>\r\n            {/* {dots(props.images)} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Carousel\r\n\r\n\r\n  ","import React, { useEffect } from 'react';\r\nimport Carousel from './components/Carousel'\r\nimport './index.css'\r\n\r\nconst App = props => {\r\n  let [currentSlide, setCurrentSlide] = React.useState({\r\n    index: 0, \r\n    initialTransform: 0})\r\n  var [images, setImages] = React.useState([1, 2, 3, 4, 5])\r\n\r\n  const families = {\r\n    sparkle: [{\r\n      src: \"./images/sparkle-1.png\",\r\n      index: 0\r\n    }, {\r\n      src: \"./images/sparkle-2.png\",\r\n      index: 1\r\n    }, {\r\n      src: \"./images/sparkle-3.png\",\r\n      index: 2\r\n    },\r\n    {\r\n      src: \"./images/sparkle-4.png\",\r\n      index: 3\r\n    },\r\n    {\r\n      src: \"./images/long.jpg\",\r\n      index: 4\r\n    },\r\n    {\r\n      src: \"./images/tall.png\",\r\n      index: 5\r\n    }],\r\n\r\n    spring: [{\r\n      src: \"./images/spring-1.png\",\r\n      index: 0\r\n    }, {\r\n      src: \"./images/spring-2.png\",\r\n      index: 1\r\n    }, {\r\n      src: \"./images/spring-3.png\",\r\n      index: 2\r\n    }]\r\n  }\r\n\r\n  const familyList = Object.keys(families)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Carousel \r\n        currentSlide={currentSlide.index}\r\n        initialTransform={currentSlide.initialTransform}\r\n        images={images}\r\n      />\r\n      <div className=\"fams\">\r\n        {   \r\n          familyList.map((family) => {\r\n            return <div key={family} className=\"famContainer\">\r\n              <h3>{family}</h3>\r\n              <div className=\"famImages\">\r\n                {\r\n                  families[family].map((image, index, array) => {\r\n                    return <div key={`${image}-${index}`} className=\"imgWrapper\">\r\n                      <img \r\n                          key={image.src}\r\n                          src={image.src}\r\n                          alt={image.src}\r\n\r\n                          onClick={() => {\r\n                            setImages(families[family]);\r\n                            setCurrentSlide({index: image.index, initialTransform: (100 / array.length * image.index)});\r\n                            var slideContainer = document.getElementById(\"slideContainer\");\r\n                            slideContainer.classList.add(\"smoothSlide\");\r\n                          }}\r\n                      />\r\n                    </div>\r\n                  })\r\n                }\r\n              </div>\r\n            </div>\r\n        })\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"disableBodyScroll\":\"css_disableBodyScroll__1xH86\",\"showOverflow\":\"css_showOverflow__3ap7Y\",\"container\":\"css_container__3i3vU\",\"slideContainer\":\"css_slideContainer__8k5Ho\",\"slide\":\"css_slide__mS6RN\",\"button_zoom\":\"css_button_zoom__2VlCI\",\"zoomedIn\":\"css_zoomedIn__2LEqu\",\"dotList\":\"css_dotList__h_sCG\",\"dot\":\"css_dot__3W-KR\",\"dot_active\":\"css_dot_active__3K7-S\"};"],"sourceRoot":""}